name: Django CI

on:
  push:
    branches: ["feature-test"]
#  pull_request:
#    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "DEV_POSTGRES_DB_NAME=${{ secrets.DEV_POSTGRES_DB_NAME }}" >> .env
          echo "DEV_POSTGRES_USER=${{ secrets.DEV_POSTGRES_USER }}" >> .env
          echo "DEV_POSTGRES_PASSWORD=${{ secrets.DEV_POSTGRES_PASSWORD }}" >> .env
          echo "DEV_POSTGRES_HOST=${{ secrets.DEV_POSTGRES_HOST }}" >> .env
          echo "DEV_POSTGRES_PORT=${{ secrets.DEV_POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB_NAME=${{ secrets.POSTGRES_DB_NAME }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "DEFAULT_PASSWORD=${{ secrets.DEFAULT_PASSWORD }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
          echo "SECRET_KEY=\"${{ secrets.SECRET_KEY }}\"" >> .env
          echo "ENVIRONMENT=dev" >> .env

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          mkdir -p logs


      - name: DB migration
        run: |
          rm -rf analysis/migrations
          python manage.py makemigrations analysis
          python manage.py migrate

      - name: Run Tests
        run: |
         python manage.py test --reverse --noinput

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            source ~/.zshrc
            docker exec in-and-out-body-web-dev2-container bash -c "
              git pull origin feature-test &&
              pip install --upgrade pip &&
              pip install -r requirements.txt &&
              rm -rf analysis/migrations &&
              python manage.py makemigrations analysis &&
              python manage.py migrate &&
              bash ./restart_django.sh >> logs/server.log 2>&1
              "