# Generated by Django 4.2.15 on 2025-03-25 13:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_prometheus.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(max_length=1)),
                ('phone_number', models.CharField(max_length=100)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('student_grade', models.IntegerField(blank=True, null=True)),
                ('student_class', models.IntegerField(blank=True, null=True)),
                ('student_number', models.IntegerField(blank=True, null=True)),
                ('student_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_display_name', models.CharField(blank=True, max_length=100, null=True)),
                ('dob', models.CharField(blank=True, max_length=8, null=True)),
                ('gender', models.CharField(max_length=1, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('last_active_dt', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            bases=(django_prometheus.models.ExportModelOperationsMixin('user_info'), models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuthInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=100)),
                ('uuid', models.CharField(max_length=100, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BodyResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_grade', models.IntegerField(null=True)),
                ('student_class', models.IntegerField(null=True)),
                ('student_number', models.IntegerField(null=True)),
                ('face_level_angle', models.FloatField(null=True)),
                ('shoulder_level_angle', models.FloatField(null=True)),
                ('hip_level_angle', models.FloatField(null=True)),
                ('leg_length_ratio', models.FloatField(null=True)),
                ('left_leg_alignment_angle', models.FloatField(null=True)),
                ('right_leg_alignment_angle', models.FloatField(null=True)),
                ('left_back_knee_angle', models.FloatField(null=True)),
                ('right_back_knee_angle', models.FloatField(null=True)),
                ('forward_head_angle', models.FloatField(null=True)),
                ('scoliosis_shoulder_ratio', models.FloatField(null=True)),
                ('scoliosis_hip_ratio', models.FloatField(null=True)),
                ('image_front_url', models.CharField(max_length=500, null=True)),
                ('image_side_url', models.CharField(max_length=500, null=True)),
                ('mobile_yn', models.CharField(default='n', max_length=1)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_dt'],
            },
            bases=(django_prometheus.models.ExportModelOperationsMixin('body_result'), models.Model),
        ),
        migrations.CreateModel(
            name='CodeInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=4)),
                ('code_id', models.CharField(max_length=40)),
                ('code_name', models.CharField(max_length=100)),
                ('min_value', models.FloatField(null=True)),
                ('max_value', models.FloatField(null=True)),
                ('normal_min_value', models.FloatField(null=True)),
                ('normal_max_value', models.FloatField(null=True)),
                ('caution_min_value', models.FloatField(null=True)),
                ('caution_max_value', models.FloatField(null=True)),
                ('outline', models.CharField(max_length=1000, null=True)),
                ('risk', models.CharField(blank=True, max_length=1000, null=True)),
                ('improve', models.CharField(blank=True, max_length=1000, null=True)),
                ('recommended', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=500, null=True), blank=True, null=True, size=2)),
                ('title', models.CharField(max_length=100, null=True)),
                ('title_outline', models.CharField(max_length=100, null=True)),
                ('title_risk', models.CharField(max_length=100, null=True)),
                ('title_improve', models.CharField(max_length=100, null=True)),
                ('title_recommended', models.CharField(max_length=100, null=True)),
                ('unit_name', models.CharField(max_length=20, null=True)),
                ('seq_no', models.IntegerField(null=True)),
                ('display_ticks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('direction', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative')], max_length=10, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='KioskInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kiosk_id', models.CharField(max_length=100, unique=True)),
                ('version', models.CharField(blank=True, max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('manager', models.CharField(blank=True, max_length=50, null=True)),
                ('remark', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_name', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=100, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
            bases=(django_prometheus.models.ExportModelOperationsMixin('organization_info'), models.Model),
        ),
        migrations.CreateModel(
            name='SchoolInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=100, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
            ],
            bases=(django_prometheus.models.ExportModelOperationsMixin('school_info'), models.Model),
        ),
        migrations.CreateModel(
            name='UserHist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_grade', models.IntegerField(null=True)),
                ('student_class', models.IntegerField(null=True)),
                ('student_number', models.IntegerField(null=True)),
                ('student_name', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('year', models.IntegerField(null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.organizationinfo')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.schoolinfo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('req_type', models.CharField(blank=True, max_length=1, null=True)),
                ('session_key', models.CharField(max_length=100)),
                ('user_id', models.BigIntegerField(null=True)),
                ('is_issued', models.BooleanField(default=False)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('last_active_dt', models.DateTimeField(auto_now_add=True, null=True)),
                ('kiosk_id', models.ForeignKey(blank=True, db_column='kiosk_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='analysis.kioskinfo', to_field='kiosk_id')),
            ],
        ),
        migrations.CreateModel(
            name='Keypoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pose_type', models.CharField(choices=[('front', 'Front'), ('side', 'Side')], max_length=5)),
                ('x', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('y', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('z', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('visibility', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('presence', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('body_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keypoints', to='analysis.bodyresult')),
            ],
        ),
        migrations.CreateModel(
            name='GaitResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_grade', models.IntegerField(null=True)),
                ('student_class', models.IntegerField(null=True)),
                ('student_number', models.IntegerField(null=True)),
                ('score', models.FloatField(null=True)),
                ('velocity', models.FloatField(null=True)),
                ('cadence', models.FloatField(null=True)),
                ('cycle_time_l', models.FloatField(null=True)),
                ('cycle_time_r', models.FloatField(null=True)),
                ('stride_len_l', models.FloatField(null=True)),
                ('stride_len_r', models.FloatField(null=True)),
                ('supp_base_l', models.FloatField(null=True)),
                ('supp_base_r', models.FloatField(null=True)),
                ('swing_perc_l', models.FloatField(null=True)),
                ('swing_perc_r', models.FloatField(null=True)),
                ('stance_perc_l', models.FloatField(null=True)),
                ('stance_perc_r', models.FloatField(null=True)),
                ('d_supp_perc_l', models.FloatField(null=True)),
                ('d_supp_perc_r', models.FloatField(null=True)),
                ('toeinout_l', models.FloatField(null=True)),
                ('toeinout_r', models.FloatField(null=True)),
                ('stridelen_cv_l', models.FloatField(null=True)),
                ('stridelen_cv_r', models.FloatField(null=True)),
                ('stridetm_cv_l', models.FloatField(null=True)),
                ('stridetm_cv_r', models.FloatField(null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.schoolinfo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_dt'],
            },
            bases=(django_prometheus.models.ExportModelOperationsMixin('gait_result'), models.Model),
        ),
        migrations.AddField(
            model_name='bodyresult',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.schoolinfo'),
        ),
        migrations.AddField(
            model_name='bodyresult',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.organizationinfo'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.schoolinfo'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='keypoint',
            constraint=models.CheckConstraint(check=models.Q(('pose_type__in', ['front', 'side'])), name='valid_pose_type'),
        ),
        migrations.AlterUniqueTogether(
            name='keypoint',
            unique_together={('body_result', 'pose_type')},
        ),
        migrations.AddIndex(
            model_name='gaitresult',
            index=models.Index(fields=['user', 'created_dt'], name='analysis_ga_user_id_b8ca82_idx'),
        ),
        migrations.AddIndex(
            model_name='bodyresult',
            index=models.Index(fields=['user', 'created_dt'], name='analysis_bo_user_id_d10505_idx'),
        ),
        migrations.AddIndex(
            model_name='userinfo',
            index=models.Index(fields=['year', 'student_grade', 'student_class'], name='analysis_us_year_778cf7_idx'),
        ),
    ]
